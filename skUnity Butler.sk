options:
	bot: skUnity Butler
	prefix: !
	logChannel: 488859255923802133
	staffRole: 475337675461754895
	mutedRole: 475337676317261857
	whiteIsBoring: 475337676992806933
	logGuild: 475328670693589002
	administratorRole: 475337677881999364

# Login to skUnity Butler
on skript load:
	load yaml "plugins/Skript/scripts/config.yml" as "config"
	set {_token} to yaml value "token" from "config"
	login to {_token} with the name "{@bot}"
	wait 5 seconds
	set {channel} to channel with id "{@logChannel}"
	set {logGuild} to guild with id "{@logGuild}"
	set {guild} to guild of {channel}
	set {staffRole} to role with id "{@staffRole}" in {guild}
	set {mutedRole} to role with id "{@mutedRole}" in {guild}
	set {whiteIsBoring} to role with id "{@whiteIsBoring}" in {guild}
	set {administratorRole} to role with id "{@administratorRole}"
	mark "{@bot}" as playing "on skunity.com"
	loop the text channels of {logGuild}:
		set {channel::%discord name of loop-value%} to loop-channel
	broadcast "skUnity bot has successfully finished loading!"
		
# Main function to send messages and store them to be deleted by a staff member later
function sendMessage(content: string, channel: channel, message: message):
	send "%{_content}% %mention tag of author of {_message}%!" to {_channel} with "{@bot}" and store it in {_msg}
	add reaction "x" to {_msg} with "{@bot}"
	set {{@bot}.%{_msg}%} to {_message}
	
# Function to tell the staff they need to include a reason
function needReason(message: message, channel: channel):
	send "You must include a reason to use this command" to {_channel} with "{@bot}" and store it in {_msg}
	add reaction "x" to {_msg} with "{@bot}"
	set {{@bot}.%{_msg}%} to {_message}
	
# Function to test perm errors
function permCheck(string: permission) :: boolean:
	if {_permission} is not set:
		return false
	if {_permission} contains "run the action send message with":
		return false
	return true


# Custom syntax to check if a member is staff 
member property condition staff:
	check:
		set {_roles::*} to roles of expr-1
		if {_roles::*} contains {staffRole}:
			continue
		else if {_roles::*} contains {administratorRole}:
			continue
		
# Function to send a embed
function sendEmbed(embed: embed builder, channel: channel, message: message):
	set {_m} to a message builder
	set embed of {_m} to {_embed}
	send {_m} to {_channel} with "{@bot}" and store it in {_msg}
	add reaction "x" to {_msg} with "{@bot}"
	set {{@bot}.%{_msg}%} to {_message}

function sendLog(builder: message):
	send {_builder} to {channel} with "{@bot}" and store it in {_msg}
	add reaction "regional_indicator_symbol_r" to {_msg} with "{@bot}"
	
# Event to remove messages if a moderator reacts with :x:
on reaction add seen by "{@bot}":
	if bot state of event-user is true:
		stop
	if event-member is staff:
		if discord name of event-emote is "x":
			if {{@bot}.%event-message%} is set:
				delete random message out of {{@bot}.%event-message%} with "{@bot}"
				delete event-message with "{@bot}"
				delete {{@bot}.%event-message%}	
			
# Event to make modifying the reason for punishment possible
on reaction add seen by "{@bot}":
	if bot state of event-user is true:
		stop
	if the discord id of event-channel is the discord id of {channel}:
		if event-member is staff:
			set {_} to the discord name of event-emote
			if {_} is "regional_indicator_symbol_r":
				remove event-emote added by event-user from event-message
				set {reason::%event-user%} to event-message
				send "You've requested to modify the reason of a message in the staff log channel, if this was by accident, reply with `cancel`. Otherwise, reply with the new reason." to event-user with event-bot
				stop
			set {_count} to 0
			loop split content of event-message at nl:
				add 1 to {_count}
				if {_count} is 1:
					set {_type} to loop-value
				if loop-value contains "User":
					set {_user} to loop-value
			set {_user::*} to {_user} split at  " "
			set {_id} to {_user::3}
			replace all "(" with "" in {_id}
			replace all ")" with "" in {_id}
			if {_type} contains "Auto-Mute":
				if {_} is "white_check_mark":
					set {_member} to user with id {_id} in {guild}
					if {_member} is not set:
						stop
					set {evaders::%{_member}%} to true
					if {Mutes::%{_member}%} is not set:
						set {Mutes::%{_member}%} to 1
					else:
						add 1 to {Mutes::%{_member}%}
					set {Mutes::%{_member}%::%{Mutes::%{_member}%}%} to "spam"
					send "You have been muted for spam and will be unmuted at the responsible staff member's discretion." to {_member} with event-bot
					set {_m} to a message builder
					append line "**-=Mute=-**"
					append line "**User**: %{_member}%##%discriminator of {_member}% (%discord id of {_member}%)"
					append line "**Reason**: spam"
					append line "**Responsible Moderator**: %event-user%##%discriminator of event-user%"
					reset reactions of event-message with event-bot
					edit event-message to show {_m}
					wait 3 seconds
					add reaction "regional_indicator_symbol_r" to event-message with event-bot
				else if {_} is "hammer":
					if user with id {_id} in {guild} is not set:
						retrieve user with id {_id} and store them in {_user}
						if {_user} is not set:
							stop
					else:
						set {_user} to user with id {_id} in {guild}
					ban {_user} from {guild} due to "Spam"
					set {_error} to the last vixio error
					if permCheck({_error}):
						edit event-message to show "Unable to ban that user, lacking permission to do so!"
						stop
					send "You have been banned from the skUnity Discord for `spam`. If you wish to appeal this ban, you may talk to %event-user%##%discriminator of event-user% at a later date." to {_user} with event-bot
					set {_m} to a new message builder
					append line "**-=Ban=-**"
					append line "**User**: %{_user}%##%discriminator of {_user}% (%discord id of {_user}%)"
					append line "**Reason**: Spam"
					append line "**Responsible Moderator**: %event-user%##%discriminator of event-user%"
					reset reactions of event-message with event-bot
					edit event-message to show {_m}
					wait 3 seconds
					add reaction "regional_indicator_symbol_r" to event-message with event-bot
				else if {_} is "x":
					set {_member} to user with id {_id} in {guild}
					if {_member} is not set:
						stop
					remove {mutedRole} from roles of {_member}
					set {_error} to the last vixio error
					if permCheck({_error}):
						edit event-message to show "Ran into a permission error! Not able to unmute!"
						stop
					reset reactions of event-message with event-bot
					set {evaders::%{_member}%} to false
					set {_m} to a new message builder
					append line "**-=Un-Mute=-**"
					append line "**User**: %{_member}%##%discriminator of {_member}% (%discord id of {_member}%)"
					append line "**Reason**: Unmute by Moderator"
					append line "**Responsible Moderator**: %event-user%##%discriminator of event-user%"
					edit event-message to show {_m}
					wait 3 seconds
					add reaction "regional_indicator_symbol_r" to event-message with event-bot
				
			
					
on direct message received:
	if {reason::%event-user%} is set:
		if content of event-message is "cancel":
			reply with "You've successfully canceled your request."
			delete {reason::%event-user%}
			stop
		set {_m} to a message builder
		set {_count} to 0
		loop split content of {reason::%event-user%} at nl:
			add 1 to {_count}
			if {_count} is 1:
				set {_type} to loop-value
			if loop-value contains "User":
				set {_user} to loop-value
			if loop-value contains "Count":
				set {_count} to loop-value
			if loop-value contains "Reason":
				set {_reason} to loop-value
				append line "**Reason**: %content of event-message%" to {_m}
			else:
				append line "%loop-value%" to {_m}
		edit {reason::%event-user%} to show {_m}
		delete {reason::%event-user%}
		set {_user::*} to {_user} split at " "
		set {_id} to {_user::3}
		replace all "(" with "" in {_id}
		replace all ")" with "" in {_id}
		set {_reasons::*} to {_reason} split at " "
		set {_realReason} to {_reasons::2}
		if {_type} contains "Warning":
			set {_count::*} to {_count} split at " "
			set {Warns::%{_id}%::%{_count::2}%} to content of event-message
		else if {_type} is "**-=Mute=-**":
			loop {Mutes::%{_id}%} times:
				set {_setReason} to {Mutes::%{_id}%::%loop-value%}
				if "%{_setReason}%" contains "%{_realReason}%":
					set {Mutes::%{_id}%::%loop-value%} to content of event-message
		else if {_type} contains "Temp":
			loop {punishment::tempmute::%{_id}%::count} times:
				if "%{punishment::tempmute::%{_id}%::%loop-value%::reason}%" is "%{_realReason}%":
					set {punishment::tempmute::%{_id}%::%loop-value%::reason} to content of event-message
		else if {_type} contains "Kick":
			loop {kicked::%{_id}%} times:
				if "%{kicked::%{_id}%::%loop-value%::reason}%" is "%{_realReason}%":
					set {kicked::%{_id}%::%loop-value%::reason} to content of event-message

		reply with "You have successfully successfully updated the reason to be `%content of event-message%`"

#*{*} All commands below this point {*}*

# Command to gather all current skUnity Butler commands
discord command help [<string>]:
	description: The help command, you may specify a specific command to get information about.
	usage: help
	prefixes: {@prefix}
	executable in: guild
	bots: {@bot}
	trigger:
		if arg-1 is set:
			loop all discord commands:
				if "%loop-value%" is arg-1:
					set {_desc} to the description of loop-value
					replace all "<STAFF>" with "" in {_desc}
					create embed:
						set author info of the embed to "Command Information"
						add field named "Command" with value "%loop-value%" to the embed
						add field named "Description" with value "%{_desc}%" to the embed
						add field named "Usage" with value "{@prefix}%usage of loop-value%" to the embed
						set color of the embed to Blue
					sendEmbed(last created embed, event-channel, event-message)
					stop
		set {_m} to a message builder
		append line "Help menu %mention tag of event-channel%" to {_m}
		append line "**General**" to {_m}
		loop all discord commands:
			set {_desc} to loop-value.getDescription()
			if {_desc} contains "<STAFF>":
				add loop-value to {_staff::*}
			else:
				append line "`%loop-value%` - %{_desc}%" to {_m}
		append line "**Staff**" to {_m}
		loop {_staff::*}:
			set {_desc} to loop-value.getDescription()
			replace all "<STAFF>" with "" in {_desc}
			append line "`%loop-value%` - %{_desc}%" to {_m}
		append "For more information on a current command, use {@prefix}help <command>. For example, {@prefix}help %random element out of all discord commands%" to {_m}
		send {_m} to event-user with event-bot and store it in {_var}
		sendMessage("My help information has been sent to your dm's", event-channel, event-message)

# Command to ban users
discord command ban <string> [<string>] [<number>]:
	description: <STAFF>Ban a member. Input can be a direct mention, user id, or name##discrim. Must provide a reason. The last argument is the amount of days worth of messages to clear.
	usage: ban <mention|user id|name##discriminator> <reason> [<days of messages to prune>]
	prefixes: {@prefix}
	executable in: guild
	bots: {@bot}
	trigger:
		if event-member is staff:
			if arg-2 is not set:
				needReason(event-message, event-channel)
				stop
			if arg-1 parsed as member is not set:
				retrieve user with id arg-1 and store them in {_user}
				if {_user} is not set:
					sendMessage("That user could not be parsed", event-channel, event-message)
					stop
			else:
				set {_user} to arg-1 parsed as a member
			send "You have been banned from the skUnity Discord for `%arg-2%`. If you wish to appeal this ban, you may talk to %event-user%##%discriminator of event-user% at a later date." to {_user} with event-bot
			if arg-3 is not set:
				ban {_user} from event-guild due to arg-2
			else:
				ban {_user} from event-guild due to arg-2 and delete arg-3 days of messages
			set {_error} to the last vixio error
			if permCheck({_error}):
				sendMessage("%{_error}%", event-channel, event-message)
				stop
			sendMessage("%{_user}%##%discriminator of {_user}% has been banned", event-channel, event-message)
			set {_m} to a new message builder
			append line "**-=Ban=-**" to {_m}
			append line "**User**: %{_user}%##%discriminator of {_user}% (%discord id of {_user}%)" to {_m}
			append line "**Reason**: %arg-2%" to {_m}
			append line "**Responsible Moderator**: %event-user%##%discriminator of event-user%" to {_m}
			sendLog({_m})
			
			
			
# Command to get all of the punishments a user has had
discord command punishments <text>:
	description: <STAFF>Get all of the punishments a user has had.
	usage: punishments <mention|user id|name##discriminator>
	executable in: guild
	prefixes: {@prefix}
	bots: {@bot}
	trigger:
		if event-member is staff:
			if arg-1 parsed as member is not set:
				retrieve user with id arg-1 and store them in {_user}
				if {_user} is not set:
					sendMessage("That user could not be parsed", event-channel, event-message)
					stop
			else:
				set {_user} to arg-1 parsed as a member
			set {_punished} to false
			if {Warnings::%{_user}%} is set:
				set {_punished} to true
			if {Mutes::%{_user}%} is set:
				set {_punished} to true
			if {punishment::tempmute::%{_user}%} is set:
				set {_punished} to true
			if {kicked::%{_user}%} is set:
				set {_punished} to true
			if {_punished} is false:
				sendMessage("%{_user}%##%discriminator of {_user}% has never been punished.", event-channel, event-message)
				stop
			set {_m} to a message builder
			append line "Here are all the current punishments for %{_user}%##%discriminator of {_user}% %mention tag of event-user%!" to {_m}
			append line "```" to {_m}
			if {Warnings::%{_user}%} is set:
				loop {Warns::%{_user}%::*}:
					append line "Warned for: %loop-value%" to {_m}
			if {Mutes::%{_user}%} is set:
				loop {Mutes::%{_user}%::*}:
					append line "Muted for: %loop-value%" to {_m}
			if {punishment::tempmute::%{_user}%::count} is set:
				loop {punishment::tempmute::%{_user}%::count} times:
					append line "Temp-muted (%{punishment::tempmute::%{_user}%::%loop-value%::length}%): %{punishment::tempmute::%{_user}%::%loop-value%::reason}%" to {_m}
			if {kicked::%{_user}%} is set:
				loop {kicked::%{_user}%} times:
					append line "Kicked for: %{kicked::%{_user}%::%loop-value%::reason}%" to {_m}
			append "```" to {_m}
			reply with {_m}
			


# Command to unban a user 
discord command unban <string> [<string>]:
	aliases: pardon
	description: <STAFF>UnBan a user by their ID. Must provide a reason for why you unbanned them.
	usage: unban <user id> <reason>
	executable in: guild
	prefixes: {@prefix}
	bots: {@bot}
	trigger:
		if event-member is staff:
			if arg-2 is not set:
				needReason(event-message, event-channel)
				stop			
			retrieve the bans of event-guild
			set {_error} to the last vixio error
			if permCheck({_error}):
				sendMessage("%{_error}%", event-channel, event-message)
				stop
			if grabbed bans is not set:
				sendMessage("The provided user was not banned", event-channel, event-message)
				stop
			loop grabbed bans:
				if discord id of loop-value is arg-1:
					retrieve user with id "%discord id of loop-value%" and store them in {_user}
					unban loop-value from event-guild
					set {_error} to the last vixio error
					if permCheck({_error}):
						sendMessage("%{_error}%", event-channel, event-message)
						stop
					sendMessage("%{_user}%##%discriminator of {_user}% has been unbanned", event-channel, event-message)
					set {_m} to a new message builder
					append line "**-=Pardon=-**" to {_m}
					append line "**User**: %discord name of loop-value%##%discriminator of loop-value%" to {_m}
					append line "**Reason**: %arg-2%" to {_m}
					append line "**Responsible Moderator**: %event-user%##%discriminator of event-user%" to {_m}
					sendLog({_m})
					stop
			sendMessage("The provided user was not banned", event-channel, event-message)
			
# Command to warn users, keeps track of warning count	
discord command warn <member> [<string>]:
	description: <STAFF>Warn a user, may provide a reason
	usage: warn <mention|user id|name##discriminator> <reason>
	executable in: guild
	prefixes: {@prefix}
	bots: {@bot}
	trigger:
		if event-member is staff:
			if arg-2 is not set:
				needReason(event-message, event-channel)
				stop
			if bot state of arg-1 is true:
				sendMessage("You may not warn bots", event-channel, event-message)
				stop
			if {Warnings::%arg-1%} is not set:
				set {Warnings::%arg-1%} to 1
			else:
				add 1 to {Warnings::%arg-1%}
			send "You have received warning number `%{Warnings::%arg-1%}%`! You must be careful, too many warnings may lead to severe consequences. You were warned for: `%arg-2%`" to arg-1 with event-bot
			set {_m} to a new message builder
			set {Warns::%arg-1%::%{Warnings::%arg-1%}%} to arg-2
			append line "**-=Warning=-**" to {_m}
			append line "**User**: %arg-1%##%discriminator of arg-1% (%discord id of arg-1%)" to {_m}
			append line "**Reason**: %arg-2%" to {_m}
			append line "**Count**: %{Warnings::%arg-1%}%" to {_m}
			append line "**Responsible Moderator**: %event-user%##%discriminator of event-user%" to {_m}
			sendLog({_m})
			sendMessage("I have issued a warning to %arg-1%##%discriminator of arg-1%", event-channel, event-message)
			
# Command to get warnings for a user 
discord command warnings [<string>] [<number>]:
	description: <STAFF>Get either all the warnings of a user or a specific warning number from a user
	executable in: guild 
	usage: warnings <mention|user id|name##discriminator> [<warning number>]
	prefixes: {@prefix}
	bots: {@bot}
	trigger:
		if event-member is staff:
			if arg-1 is not set:
				sendMessage("You must include a user to get the warnings of", event-channel, event-message)
				stop
			if arg-1 parsed as member is not set:
				retrieve user with id arg-1 and store them in {_user}
				if {_user} is not set:
					sendMessage("That user could not be parsed", event-channel, event-message)
					stop
			else:
				set {_user} to arg-1 parsed as a member
			if {Warnings::%{_user}%} is not set:
				sendMessage("%{_user}%##%discriminator of {_user}% currently has no warnings", event-channel, event-message)
				stop
			if arg-2 is set:
				if {Warns::%{_user}%::%arg-2%} is not set:
					sendMessage("That user does not have a warning attached to that number", event-channel, event-message)
					stop
				sendMessage("That user was warned for `%{Warns::%{_user}%::%arg-2%}%`", event-channel, event-message)
				stop
			set {_m} to a message builder
			append line "```vbs" to {_m}
			set {_count} to 0
			loop {Warns::%{_user}%::*}:
				add 1 to {_count}
				append line "%{_count}%) %loop-value%" to {_m}
			append "```" to {_m}
			send {_m} to event-channel with "{@bot}" and store it in {_msg}
			add reaction "x" to {_msg} with "{@bot}"
			set {{@bot}.%{_msg}%} to {_message}
		else:
			if {Warnings::%event-member%} is not set:
				sendMessage("You currently have no warnings", event-channel, event-message)
				stop
			set {_m} to a message builder
			append line "Here is a list of your current warnings %mention tag of event-member%"
			append line "```"
			set {_c} to 1
			loop {Warns::%event-member%::*}:
				append line "%{_c}%) %loop-value%"
				add 1 to {_c}
			append "```"
			send {_m} to event-channel with "{@bot}" and store it in {_msg}
			add reaction "x" to {_msg} with "{@bot}"
			set {{@bot}.%{_msg}%} to {_message}
				
# Command to remove a warning from a user
discord command relieve <member> <number>:
	description: <STAFF>Remove a warning by number from a user
	executable in: guild
	usage: relieve <mention|user id|name##discriminator> <warning number>
	prefixes: {@prefix}
	bots: {@bot}
	trigger:
		if event-member is staff:
			if {Warnings::%arg-1%} is not set:
				sendMessage("%arg-1%##%discriminator of arg-1% currently has no warnings", event-channel, event-message)
				stop
			if {Warns::%arg-1%::%arg-2%} is not set:
				sendMessage("%arg-1%##%discriminator of arg-1% does not have a warning attached to that number", event-channel, event-message)
				stop
			subtract 1 from {Warnings::%arg-1%}
			send "Your warning for `%{Warns::%arg-1%::%arg-2%}%` has been reverted by %event-user%! Your new warning count is `%{Warnings::%arg-1%}%`" to arg-1 with event-bot
			sendMessage("Successfully reverted %arg-1%##%discriminator of arg-1%'s warning. New warning count is %{Warnings::%arg-1%}%", event-channel, event-message)
			if {Warnings::%arg-1%} is 0:
				delete {Warnings::%arg-1%}
			delete {Warns::%arg-1%::%arg-2%}


# Command to mute users, may provide a reason	
discord command mute <member> [<string>]:
	description: <STAFF>Mute a user, must provide a reason.
	executable in: guild
	usage: mute <mention|user id|name##discriminator> <reason>
	prefixes: {@prefix}
	bots: {@bot}
	trigger:
		if event-member is staff:
			if arg-2 is not set:
				needReason(event-message, event-channel)
				stop
			set {_roles::*} to roles of arg-1
			if {_roles::*} contains {mutedRole}:
				sendMessage("%arg-1%##%discriminator of arg-1% is already muted", event-channel, event-message)
				stop
			add {mutedRole} to roles of arg-1
			set {_error} to the last vixio error
			if permCheck({_error}):
				sendMessage("%{_error}%", event-channel, event-message)
				stop
			set {evaders::%arg-1%} to true
			if {Mutes::%arg-1%} is not set:
				set {Mutes::%arg-1%} to 1
			else:
				add 1 to {Mutes::%arg-1%}
			set {Mutes::%arg-1%::%{Mutes::%arg-1%}%} to arg-2
			send "You have been muted for `%arg-2%` and will be unmuted at the responsible staff member's discretion." to arg-1 with event-bot
			sendMessage("%discord name of arg-1%##%discriminator of arg-1% has been muted", event-channel, event-message)
			set {_m} to a new message builder
			append line "**-=Mute=-**" to {_m}
			append line "**User**: %arg-1%##%discriminator of arg-1% (%discord id of arg-1%)" to {_m}
			append line "**Reason**: %arg-2%" to {_m}
			append line "**Responsible Moderator**: %event-user%##%discriminator of event-user%" to {_m}
			sendLog({_m})
	
# Command to unmute users
discord command unmute <member> [<string>]:
	description: <STAFF>Un-mute a user, must provide a reason
	executable in: guild 
	usage: unmute <mention|user id|name##discriminator> <reason>
	prefixes: {@prefix}
	bots: {@bot}
	trigger:
		if event-member is staff:
			if arg-2 is not set:
				needReason(event-message, event-channel)
				stop
			set {_roles::*} to roles of arg-1
			if {_roles::*} does not contain {mutedRole}:
				sendMessage("That user is not currently muted", event-channel, event-message)
				stop
			remove {mutedRole} from roles of arg-1
			set {_error} to the last vixio error
			if permCheck({_error}):
				sendMessage("I ran into an error! `%{_error}%`", event-channel, event-message)
				stop
			if {tempMute::%arg-1%} is true:
				delete {tempMute::%arg-1%}
				delete {tempMute::%arg-1%::time}
				delete {tempMute::%arg-1%::length}
				delete {tempMute::%arg-1%::*}
			sendMessage("%arg-1%##%discriminator of arg-1% has been unmuted", event-channel, event-message)
			set {evaders::%arg-1%} to false
			set {_m} to a new message builder
			append line "**-=Un-Mute=-**" to {_m}
			append line "**User**: %arg-1%##%discriminator of arg-1% (%discord id of arg-1%)" to {_m}
			append line "**Reason**: %arg-2%" to {_m}
			append line "**Responsible Moderator**: %event-user%##%discriminator of event-user%" to {_m}
			sendLog({_m})			
			
# Command to kick users, may provide a reason 
discord command kick <member> [<string>]:
	description: <STAFF>kick a user, must provide a reason
	usage: kick <mention|user id|name##discriminator> <reason>
	executable in: guild
	prefixes: {@prefix}
	bots: {@bot}
	trigger:
		if event-member is staff:
			if arg-2 is not set:
				needReason(event-message, event-channel)
				stop
			kick arg-1 from event-guild due to arg-2 with event-bot
			set {_error} to the last vixio error
			if permCheck({_error}):
				sendMessage("%{_error}%", event-channel, event-message)
				stop
			if bot state of arg-1 is false:
				send "You have been kicked from the skUnity Discord for `%arg-2%`." to arg-1 with event-bot
			sendMessage("I have successfully kicked %arg-1%##%discriminator of arg-1% from the server", event-channel, event-message)
			if {kicked::%arg-1%} is not set:
				set {kicked::%arg-1%} to 1
			else:
				add 1 to {kicked::%arg-1%}
			set {kicked::%arg-1%::%{kicked::%arg-1%}%::reason} to arg-2
			set {_m} to a new message builder
			append line "**-=Kick=-**" to {_m}
			append line "**User**: %arg-1%##%discriminator of arg-1% (%discord id of arg-1%)" to {_m}
			append line "**Reason**: %arg-2%" to {_m}
			append line "**Responsible Moderator**: %event-user%##%discriminator of event-user%" to {_m}
			sendLog({_m})
	
# Command to purge messages 
discord command purge <number>:
	description: <STAFF>Remove a number of messages, the executing message is not included in the count.
	usage: purge <number>
	prefixes: {@prefix}
	executable in: guild
	bots: {@bot}
	trigger:
		if event-member is staff:
			set {_num} to arg-1
			grab the last {_num} messages in event-channel
			set {_messages::*} to grabbed messages
			delete {_messages::1}
			purge {_messages::*} with event-bot
			set {_error} to the last vixio error
			if permCheck({_error}):
				sendMessage("I ran into an error! `%{_error}%`", event-channel, event-message)
				stop
			sendMessage("I have successfully purged %arg-1% messages", event-channel, event-message)
			set {_m} to a new message builder
			append line "**-=Purge=-**" to {_m}
			append line "**Channel**: %mention tag of event-channel%" to {_m}
			append line "**Amount of Messages**: %arg-1%" to {_m}
			append line "**Responsible Moderator**: %event-user%##%discriminator of event-user%" to {_m}
			send {_m} to {channel} with event-bot 
			
			
# Command to temporarily mute something 
discord command tempmute <member> [<string>] [<timespan>]:
	description: <STAFF>Temporarily mute a user by ID or by a direct mention, must include a timespan and a reason.
	usage: tempmute <user id|direct mention|name##discriminator> <reason> <timespan>
	prefixes: {@prefix}
	executable in: guild 
	bots: {@bot}
	trigger:
		if event-member is staff:
			if arg-2 is not set:
				needReason(event-message, event-channel)
				stop
			if arg-3 is not set:
				sendMessage("You must include a amount of time to mute the user for", event-channel, event-message)
				stop
			set {_roles::*} to roles of arg-1
			if {_roles::*} contains {mutedRole}:
				sendMessage("That user is already muted", event-channel, event-message)
				stop
			add {mutedRole} to roles of arg-1
			set {_error} to the last vixio error
			if permCheck({_error}):
				sendMessage("I ran into an error! `%{_error}%`", event-channel, event-message)
				stop
			if {punishment::tempmute::%arg-1%::count} is not set:
				set {punishment::tempmute::%arg-1%::count} to 1
			else:
				add 1 to {punishment::tempmute::%arg-1%::count}
			set {_count} to {punishment::tempmute::%arg-1%::count}
			set {punishment::tempmute::%arg-1%::%{_count}%::reason} to arg-2
			set {punishment::tempmute::%arg-1%::%{_count}%::length} to arg-3
			set {tempMute::%arg-1%} to arg-1
			set {tempMute::%arg-1%::length} to arg-3
			set {tempMute::%arg-1%::time} to arg-3 from now
			set {evaders::%arg-1%} to true
			send "You have been temporarily muted for `%arg-2%`, the length of the temp mute is `%arg-3%`." to arg-1 with event-bot
			sendMessage("I have successfully muted %arg-1%##%discriminator of arg-1% for %arg-3%", event-channel, event-message)
			set {_m} to a new message builder
			append line "**-=Temp-Mute=-**" to {_m}
			append line "**User**: %arg-1%##%discriminator of arg-1% (%discord id of arg-1%)" to {_m}
			append line "**Reason**: %arg-2%" to {_m}
			append line "**Amount of time**: %arg-3%" to {_m}
			append line "**Responsible Moderator**: %event-user%##%discriminator of event-user%" to {_m}
			sendLog({_m})
						
# Event to un-mute people who are temp-muted
every minute:
	loop {tempMute::*}:
		if {tempMute::%loop-index%::time} < now:
			wait 3 seconds
			remove {mutedRole} from roles of {tempMute::%loop-index%} in guild of {channel} with "{@bot}"
			set {_m} to a new message builder
			append line "**-=Auto-Un-Mute=-**" to {_m}
			append line "**User**: %{tempMute::%loop-index%}%##%discriminator of {tempMute::%loop-index%}% (%discord id of {tempMute::%loop-index%}%)" to {_m}
			sendLog({_m})
			delete {tempMute::%loop-index%::*}
			delete {tempMute::%loop-index%}
			delete {evaders::%loop-index%}
	loop discord members of {guild}:
		delete {_roles::*}
		if bot state of loop-member is false:
			set {_roles::*} to roles of loop-member
			if {_roles::*} is not set:
				add 1 to {_count}
				add {whiteIsBoring} to roles of loop-member with "{@bot}"
			else if {_roles::*} does not contain {whiteIsBoring}:
				add 1 to {_count}
				add {whiteIsBoring} to roles of loop-member with "{@bot}"
			
		
# Command to reload the skript
discord command reload:
	prefixes: {@prefix}
	usage: reload
	description: <STAFF>Reload's the skript
	bots: {@bot}
	executable in: guild
	trigger:
		if event-member is staff:
			clear {errors::*}
			evaluate logging errors in {errors::*}: "execute console command ""skript reload %script%"""
			if {errors::*} is set:
				sendMessage("I ran into %size of {errors::*}% errors, the first one is `%{errors::1}%`", event-channel, event-message)
				stop
			sendMessage("I have successfully reloaded the skript", event-channel, event-message)

discord command addall:
	prefixes: {@prefix}
	usage: addall 
	description: <STAFF>Add the White Is Boring role to everyone who doesn't have it
	bots: {@bot}
	executable in: guild
	trigger:
		if event-member is staff:
			set {_count} to 0
			loop discord members of event-guild:
				delete {_roles::*}
				set {_member} to loop-member
				if bot state of {_member} is false:
					set {_roles::*} to roles of {_member}
					if {_roles::*} is not set:
						add 1 to {_count}
						add {whiteIsBoring} to roles of {_member}
					else if {_roles::*} does not contain {whiteIsBoring}:
						add 1 to {_count}
						add {whiteIsBoring} to roles of {_member}
			sendMessage("%{_count}% people have received the white is boring role", event-channel, event-message)
			
# Evaluate script code through the bot, empty trigger for documentation purposes
discord command eval <string>:
	prefixes: {@prefix}
	usage: eval <string>
	description: <STAFF>Evaluate skript code
	bots: {@bot}
	trigger:
		if event-member is staff:
			send typing in event-channel
			set {_msg} to arg-1
			if {_msg} contains "```":
				replace all "```" with "" in {_msg}
			evaluate logging errors in {errors::*}: {_msg}
			if {errors::*} is set:
				sendMessage("Ran into a error! `%{errors::*}%`", event-channel, event-message)
				clear {errors::*}
				stop

#*{*} MISC COMMANDS {*}*			
				
# Get a bunch of information about a user
discord command user [<member>]:
	description: Get a ton of information about a user.
	prefixes: {@prefix}
	executable in: guild
	usage: user [<mention|user id|name##discriminator>]
	bots: {@bot}
	trigger:
		if arg-1 is not set:
			set {_user} to event-user
		else:
			set {_user} to arg-1
		create embed:
			set {_guildDate::*} to split "%join date of {_user} in event-guild%" at " "
			set {_discordDate::*} to split "%discord join date of {_user}%" at " "
			set {_bot} to bot state of {_user}
			if game of {_user} is set:
				set {_game} to game of {_user}
			else:
				set {_game} to "NONE"
			set the author info of the embed to author named "Who is %discord name of {_user}%" with no url and no icon 
			set the thumbnail of embed to "%avatar of {_user}%"
			set {_m} to a message builder
			append line "Name: **%discord name of {_user}%##%discriminator of {_user}%**" to {_m}
			append line "ID: **%discord id of {_user}%**" to {_m}
			append line "Joined Discord: **%{_discordDate::1}%**" to {_m}
			append nl to {_m}
			append line "__**General**__:" to {_m}
			set {_status} to status of {_user}
			append line "Status: **%{_status}.toString().toUpperCase()%**" to {_m}
			append line "Nick: **%discord nickname of {_user} in event-guild%**" to {_m}
			append line "Game: **%{_game}%**" to {_m}
			append line "Bot: **%{_bot}.toString().toUpperCase()%**" to {_m}
			append line "Joined Guild: **%{_guildDate::1}%**" to {_m}
			set the description of the embed to "%{_m}%"
		sendEmbed(last created embed, event-channel, event-message)
		
					
# Event to give the white is boring role when someone joins. Also re-adds muted role if they are avoiding it
on member join guild seen by "{@bot}":
	if {evaders::%event-user%} is set:
		if {evaders::%event-user%} is true:
			wait 3 seconds
			add {mutedRole} to roles of event-member
	wait 3 seconds
	add {whiteIsBoring} to roles of event-member
# TODO: Combine all three guild message rec events into one 			
# Event to stop muted people from speaking if they are trying to mute evade
on guild message received seen by "{@bot}":
	discord id of event-guild is discord id of {guild}
	if {evaders::%event-user%} is set:
		if {evaders::%event-user%} is true:
			delete event-message with event-bot
			add {mutedRole} to roles of event-member
#Event that deletes those annoying dating discord ads -.-			
on guild message received seen by "{@bot}":
	discord id of event-guild is discord id of {guild}
	if content of event-message contains "Sex dating Discord":
		if content of event-message contains "http://discord.":
			delete event-message with event-bot
			set {_} to a message builder
			append line "**-=Suspicious message deleted=-**"
			append line "**User**: %event-user%"
			append line "**Channel**: %event-channel%"
			append line "**Message**: %content of event-message%"
			send {_} to {channel} with event-bot
			

# Logger to send all messages to the logging guild		
on guild message received:
	discord id of event-guild is not discord id of {logGuild}
	set {_channel} to {channel::%discord name of event-channel%}
	set {_role} to first element out of roles of event-member
	create embed:
		set the description of embed to event-string
		if "%avatar of event-user%" is "null":
			set the author info of the embed to author named discord name of event-user with url "%jump url of event-message%" and icon "%default avatar of event-user%"
		else:
			set the author info of the embed to author named discord name of event-user with url "%jump url of event-message%" and icon "%avatar of event-user%"
		set the colour of the embed to color of {_role}
		set the timestamp of embed to now
	send the last created embed to {_channel} with event-bot

# Spam detection system to auto mute spammers	
on guild message received:
	if event-member is not staff:
		discord id of event-guild is discord id of {guild}
		bot state of event-user is false
		set {lastMessage::%event-user%} to content of event-message
		if {lastMessage::%event-user%::%content of event-message%} is not set:
			set {lastMessage::%event-user%::%content of event-message%} to now
		if "%content of event-message%" is "%{lastMessage::%event-user%}%":
			add 1 to {lastMessage::%event-user%::%content of event-message%::count}
			if {lastMessage::%event-user%::%content of event-message%::count} is more than or equal to 5:
				set {_difference} to difference between {lastMessage::%event-user%::%content of event-message%} and now
				if {_difference} is less than 30 seconds:
					add {mutedRole} to roles of event-member
					clear {lastMessage::%event-user%::*}
					delete {lastMessage::%event-user%}
					set {evaders::%event-user%} to true
					set {_} to a message builder
					append line "**-=Auto-Mute=-**"
					append line "**User**: %event-user%##%discriminator of event-user% (%discord id of event-user%)"
					append line "**Reason**: Spam"
					append line "**Channel**: %event-channel%"
					append line "**Time**: %now%"
					set {_t} to "%text of {_}% %content of event-message%"
					if length of {_t} is less than 2000:
						append line "**Message**: %content of event-message%"
					append line "here"
					send {_} to {channel} with "{@bot}" and store it in {_msg}
					add reaction "white_check_mark" to {_msg} with event-bot 
					add reaction "hammer" to {_msg} with event-bot 
					add reaction "x" to {_msg} with event-bot 

#Clears out lastMessage var if it wasn't marked as spam after 2 minutes					
every minute:
	loop {lastMessage::*}:
		loop {lastMessage::%loop-index%::*}:
			set {_difference} to difference between {lastMessage::%loop-index-1%::%loop-value-1%} and now
			if {_difference} is more than 2 minutes:
				delete {lastMessage::%loop-index-1%::*}
				delete {lastMessage::%loop-index-1%}


# Clear stored messages on shutdown 
on skript unload:
	clear {lastMessage::*}
	